"""
HTML report generator for validation results
"""

import json
import time
from pathlib import Path
from typing import Dict, Any


class HTMLReporter:
    """Generate HTML reports for web viewing"""

    def __init__(self):
        self.css_styles = """
        <style>
            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { text-align: center; margin-bottom: 40px; border-bottom: 3px solid #007acc; padding-bottom: 20px; }
            .score-badge { display: inline-block; padding: 10px 20px; border-radius: 25px; font-size: 24px; font-weight: bold; margin: 10px; }
            .score-A { background: #4CAF50; color: white; }
            .score-B { background: #2196F3; color: white; }
            .score-C { background: #FF9800; color: white; }
            .score-D { background: #9C27B0; color: white; }
            .score-F { background: #F44336; color: white; }
            .section { margin: 30px 0; padding: 20px; border-radius: 8px; }
            .performance { background: #e8f5e8; border-left: 5px solid #4CAF50; }
            .statistical { background: #e3f2fd; border-left: 5px solid #2196F3; }
            .risk { background: #fff3e0; border-left: 5px solid #FF9800; }
            .recommendations { background: #fce4ec; border-left: 5px solid #E91E63; }
            .metric-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px; margin: 20px 0; }
            .metric-card { background: white; padding: 15px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }
            .metric-value { font-size: 20px; font-weight: bold; margin: 5px 0; }
            .metric-label { color: #666; font-size: 14px; }
            .good { color: #4CAF50; }
            .warning { color: #FF9800; }
            .danger { color: #F44336; }
            .info { color: #2196F3; }
            .algorithm-results { margin: 20px 0; }
            .algorithm-card { background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #007acc; }
            .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; text-align: center; color: #666; }
            .timestamp { font-style: italic; }
        </style>
        """

    def generate(self, results: Dict[str, Any], output_dir: str = './reports') -> str:
        """Generate HTML report

        Args:
            results: Complete validation results
            output_dir: Output directory

        Returns:
            Path to generated HTML file
        """
        # Create output directory
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)

        # Generate filename with timestamp
        timestamp = int(time.time())
        filename = f"validation_report_{timestamp}.html"
        output_file = output_path / filename

        # Generate HTML content
        html_content = self._generate_html(results)

        # Write HTML file
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html_content)

        return str(output_file)

    def _generate_html(self, results: Dict[str, Any]) -> str:
        """Generate complete HTML content"""
        scores = results.get('scores', {})
        total_score = scores.get('total_score', 0)
        grade = scores.get('grade', 'F')

        html = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Strategy Validation Report</title>
            {self.css_styles}
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>Strategy Validation Report</h1>
                    <p>Generated by StratVal - AI-powered trading strategy validation</p>
                    <div class="score-badge score-{grade}">{grade} ({total_score}/100)</div>
                </div>

                {self._generate_performance_section(results)}
                {self._generate_statistical_section(results)}
                {self._generate_risk_section(results)}
                {self._generate_recommendations_section(results)}
                {self._generate_algorithms_section(results)}

                <div class="footer">
                    <p>Report generated: <span class="timestamp">{time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(results.get('timestamp', time.time())))}</span></p>
                    <p>Validation mode: {results.get('validation_mode', 'unknown').upper()}</p>
                </div>
            </div>
        </body>
        </html>
        """

        return html

    def _generate_performance_section(self, results: Dict[str, Any]) -> str:
        """Generate performance metrics HTML"""
        scores = results.get('scores', {})
        details = scores.get('details', {}).get('performance', {})

        if not details:
            return ""

        html = """
        <div class="section performance">
            <h2>üìà Performance Metrics</h2>
            <div class="metric-grid">
        """

        metrics = [
            ("Sharpe Ratio", details.get('sharpe_ratio', 0), "Higher is better"),
            ("Total Return", f"{details.get('total_return', 0):.2%}", "Overall return"),
            ("Win Rate", f"{details.get('win_rate', 0):.1%}", "Percentage of winning trades"),
            ("Profit Factor", f"{details.get('profit_factor', 0):.2f}", "Gross profit / gross loss"),
            ("Max Drawdown", f"{details.get('max_drawdown', 0):.1%}", "Largest peak-to-trough decline"),
            ("Volatility", f"{details.get('volatility', 0):.1%}", "Return volatility")
        ]

        for name, value, description in metrics:
            css_class = self._get_metric_css_class(name, value)
            html += f"""
                <div class="metric-card">
                    <div class="metric-label">{name}</div>
                    <div class="metric-value {css_class}">{value}</div>
                    <div class="metric-description">{description}</div>
                </div>
            """

        html += """
            </div>
        </div>
        """

        return html

    def _generate_statistical_section(self, results: Dict[str, Any]) -> str:
        """Generate statistical validation HTML"""
        algorithm_results = results.get('algorithm_results', {})

        if 'MCPT_BARS' not in algorithm_results:
            return ""

        mcpt = algorithm_results['MCPT_BARS']

        html = """
        <div class="section statistical">
            <h2>üî¨ Statistical Validation</h2>
            <div class="algorithm-results">
                <h3>Monte Carlo Permutation Test (MCPT_BARS)</h3>
        """

        # P-value
        pvalue = mcpt.get('pvalue')
        if pvalue is not None:
            css_class = "good" if pvalue < 0.05 else "danger"
            html += f"""
                <div class="metric-card">
                    <div class="metric-label">Statistical Significance (p-value)</div>
                    <div class="metric-value {css_class}">{pvalue:.4f}</div>
                    <div class="metric-description">{'Significant' if pvalue < 0.05 else 'Not significant'}</div>
                </div>
            """

        # Skill
        skill = mcpt.get('skill')
        if skill is not None:
            css_class = self._get_skill_css_class(skill)
            html += f"""
                <div class="metric-card">
                    <div class="metric-label">True Skill</div>
                    <div class="metric-value {css_class}">{skill:.4f}</div>
                    <div class="metric-description">Estimated true skill after bias correction</div>
                </div>
            """

        # Training bias
        bias = mcpt.get('training_bias')
        if bias is not None:
            css_class = self._get_bias_css_class(bias)
            html += f"""
                <div class="metric-card">
                    <div class="metric-label">Training Bias</div>
                    <div class="metric-value {css_class}">{bias:.4f}</div>
                    <div class="metric-description">Overfitting bias estimate</div>
                </div>
            """

        html += """
            </div>
        </div>
        """

        return html

    def _generate_risk_section(self, results: Dict[str, Any]) -> str:
        """Generate risk analysis HTML"""
        scores = results.get('scores', {})
        details = scores.get('details', {}).get('risk', {})

        if not details:
            return ""

        html = """
        <div class="section risk">
            <h2>‚ö†Ô∏è Risk Analysis</h2>
            <div class="metric-grid">
        """

        risk_metrics = [
            ("Max Drawdown", f"{details.get('max_drawdown', 0):.1%}" if details.get('max_drawdown') is not None else "N/A", "Largest peak-to-trough decline"),
            ("Volatility", f"{details.get('volatility', 0):.1%}" if details.get('volatility') is not None else "N/A", "Return volatility"),
            ("Calmar Ratio", f"{details.get('calmar_ratio', 0):.2f}" if details.get('calmar_ratio') is not None else "N/A", "Return per unit of drawdown"),
            ("95% Drawdown", f"{details.get('drawdown_95', 0):.1%}" if details.get('drawdown_95') is not None else "N/A", "95th percentile drawdown"),
            ("99% Drawdown", f"{details.get('drawdown_99', 0):.1%}" if details.get('drawdown_99') is not None else "N/A", "99th percentile drawdown")
        ]

        for name, value, description in risk_metrics:
            if details.get(name.lower().replace(' ', '_').replace('%', '')) is not None:
                css_class = self._get_risk_metric_css_class(name, value)
                html += f"""
                    <div class="metric-card">
                        <div class="metric-label">{name}</div>
                        <div class="metric-value {css_class}">{value}</div>
                        <div class="metric-description">{description}</div>
                    </div>
                """

        html += """
            </div>
        </div>
        """

        return html

    def _generate_recommendations_section(self, results: Dict[str, Any]) -> str:
        """Generate recommendations HTML"""
        scores = results.get('scores', {})

        if 'recommendations' not in scores or not scores['recommendations']:
            return ""

        html = """
        <div class="section recommendations">
            <h2>üí° Recommendations</h2>
            <ul>
        """

        for rec in scores['recommendations']:
            html += f"<li>{rec}</li>"

        html += """
            </ul>
        </div>
        """

        return html

    def _generate_algorithms_section(self, results: Dict[str, Any]) -> str:
        """Generate algorithms used section"""
        algorithms = results.get('algorithms_run', [])

        if not algorithms:
            return ""

        html = """
        <div class="section">
            <h3>Validation Algorithms Used</h3>
            <div class="algorithm-results">
        """

        for algo in algorithms:
            html += f'<span class="algorithm-card">{algo}</span> '

        html += """
            </div>
        </div>
        """

        return html

    def _get_metric_css_class(self, name: str, value) -> str:
        """Get CSS class for metric value"""
        try:
            # Convert to float if it's a string
            if isinstance(value, str):
                value = float(value.replace('%', '')) if '%' in value else float(value)
        except (ValueError, AttributeError):
            return "info"

        if name == "Sharpe Ratio":
            return "good" if value > 1.0 else "warning" if value > 0.5 else "danger"
        elif name == "Total Return":
            return "good" if value > 0.10 else "warning" if value > 0.0 else "danger"
        elif name == "Win Rate":
            return "good" if value > 0.55 else "warning" if value > 0.45 else "danger"
        elif name == "Profit Factor":
            return "good" if value > 1.5 else "warning" if value > 1.0 else "danger"
        elif name == "Max Drawdown":
            return "good" if value < 0.20 else "warning" if value < 0.40 else "danger"
        elif name == "Volatility":
            return "good" if value < 0.25 else "warning" if value < 0.40 else "danger"
        else:
            return "info"

    def _get_skill_css_class(self, skill: float) -> str:
        """Get CSS class for skill value"""
        if skill > 0.02:
            return "good"
        elif skill > 0.01:
            return "info"
        elif skill > 0.005:
            return "warning"
        elif skill > 0.0:
            return "danger"
        else:
            return "danger"

    def _get_bias_css_class(self, bias: float) -> str:
        """Get CSS class for bias value"""
        abs_bias = abs(bias)
        if abs_bias < 0.01:
            return "good"
        elif abs_bias < 0.05:
            return "info"
        elif abs_bias < 0.10:
            return "warning"
        else:
            return "danger"

    def _get_risk_metric_css_class(self, name: str, value) -> str:
        """Get CSS class for risk metric"""
        try:
            # Convert to float if it's a string
            if isinstance(value, str):
                if value == "N/A":
                    return "info"
                value = float(value.replace('%', '')) if '%' in value else float(value)
        except (ValueError, AttributeError):
            return "info"

        if name == "Max Drawdown":
            return "good" if value < 0.20 else "warning" if value < 0.40 else "danger"
        elif name == "Volatility":
            return "good" if value < 0.25 else "warning" if value < 0.40 else "danger"
        elif name == "Calmar Ratio":
            return "good" if value > 1.0 else "warning" if value > 0.5 else "danger"
        else:
            return "info"
